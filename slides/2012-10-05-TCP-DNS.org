* Telephone Numbers :slide:
  + Specify a device, not necessarily a person
  + But to call a person, we eventually need to call a device
  + How do we map between a person and their phone?
** Parallels :notes:
   + Keeping your phone number is recent, but still may need to change
   + Home, cell numbers services to balance between them
   + Ultimately, we get a phone number from the person
   + But we can trust other people who have it to share

* Hostnames -> IP addresses :slide:
  + Just like my telephone number, we associate names like =yelp.com= to a
    number
  + Association is done using Domain Name Service (DNS)
  + DNS has a hierarchy for finding who can authoritatively provide an IP
    address, and typically has caching once the question has been answered

* Parts of a Hostname :slide:
  + Top Level Domain :: highest level in domain hierarchy: =.com= =.org=
    =.edu= =.uk= =.cn=
  + Subdomain :: labels specifying the hierarchy reading from right to left
  + Hostname :: domain name with an IP address
** Details :notes:
   + The first subdomain can be registered by domain registrars
   + Further subdomains can be generated by domain owners (eg.
     =www.google.com=, =people.ischool.berkeley.edu=
   + Subdomains can be arbitrary, but typically used for department (eg =ischool=), service (eg. =www=), or area (=en=)
   + =com= is not a hostname because it does not have an IP

* Hostnames -> IP addresses :slide:
  + To find a mapping, a client asks the TLD name server
  + The nameservers will recursively direct the client to the domain authority
  + Authority will return an IP address, client may optionally cache
[[file:img/dns-recursive.png]]
** Caching :notes:
   + Caching can happen at many levels
   + Typically your computer will ask the ISP name server
   + The ISP nameserver will recursively lookup the result and cache it for the
     next customer

* Why Separate Names & Addresses? :slide:
   + Different semantic meaning
   + May want other mappings: names to street addresses
   + They don't have to be the same, so keep flexibility
** Tradeoffs :notes:
   + Flexibility wins again

* Browsers :slide:
  + Type in a URL with domain name (eg. =yelp.com=)
  + Browser uses DNS to find IP address (eg. =199.255.189.60=)
  + Connects to address on a port (eg. =80=)
  + Sends packets of data containing =GET / HTTP/1.1=
** Packets :notes:
   + Operating System typically breaks up a stream of data into packets

* Highest selling domain names :slide:animate:
  + diamond.com $7.5 million
  + fb.com $8.5 million
  + porn.com $9.5 million
  + fund.com $9.99 million
  + sex.com $13 million

* IP is Unreliable :slide:
  + Best effort delivery
  + No guarantees
  + How do we build a reliable Web on it?

* Transport Control Protocol :slide:
  + Correctness :: prevent data corruption
  + Reliability :: ensure delivery or error
  + Ordering :: add sequence numbers
  + Congestion :: back off
** Accurate delivery :notes:
   + How do you know if the data you receive is the same as was sent? Checksum
   + How does the sender know if a packet was delivered? Ack
   + How do we know the ordering of the data? Packet sequence numbering

** Checksum :slide:
   + Take the bits in a message
   + Add them up*
   + Append the sum
   + Example: "jim" = 106 + 105 + 109 = *320*
** Details :notes:
   + Many other ways of calculating besides addition, eg xor or polynomial
     formulas
   + Difference between checksum for errors and checksum against attackers

** Ack :slide:two_col:
   + When a machine receives a packet, it acknowledges it
   + If a machine does not receive an ack, it resends
   + To keep track of messages, uses a sliding window
[[file:img/tcp-window.png]]
** Window :notes:
   + If the sender waits for every ack, things get pretty slow
   + So instead we keep sending up to a certain point, but then if we don't hear
     anything for a while we stop and wait for ack
   + Like a good phone conversation

** Sequence Numbers :slide:two_col:
[[file:img/ip-communication.png]]
   + If we can resend, or packets can take different routes, they can be
     delivered in a different order
   + How do we know the right order?
   + Agree on a starting number, send numbered packets
   + Client will keep track of packets received, deliver data in order to app
** Tricks :notes:
   + We can also use this as an optimization for acks: Send ack for *all*
     packets < current one

** Congestion :slide:
   + Why are packets delayed?
   + Often, it is because the system is overwhelmed
   + So back off! If it is still overwhelmed, back off more!
** Exponential :notes:
   + Wait 1 second, 2 seconds, 4, 8, 16...
   + Randomize wait, so not everyone tries again at the same time
   + Then ramp up again: larger packets, bigger window

* Telnet :slide:
  + TCP/IP client
  + Connects to a host at lower level
  + Up to you to communicate with HTTP or any other protocol
  + Does TCP/IP know about domains or hostnames?
** No! :notes:
   + That's why we must send =Host= header in HTTP

* Flexibility :slide:two_col:
  + TCP/IP most commonly used, but not the only ones!
  + Realtime protocols (voice, video) may value timeliness over correctness
[[file:img/protocols.png]]

* Composability! :slide:
  + Internet is a network of networks
  + IP used to send packets between two addresses
  + DNS maps names to addresses
  + TCP ensures reliable communication
  + Web built on Internet technology
** Notes :notes:
   + Each component evolved, and we're not stuck with any one particular
     technology
   + But all parts must be working correctly for users to get a great experience


#+STYLE: <link rel="stylesheet" type="text/css" href="production/common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/color-blue.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/presenter.css" media="presenter" />
#+STYLE: <link href='http://fonts.googleapis.com/css?family=Lobster+Two:700|Yanone+Kaffeesatz:700|Open+Sans' rel='stylesheet' type='text/css'>

#+BEGIN_HTML
<script type="text/javascript" src="production/org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
# buffer-file-coding-system: utf-8-unix
# End:
