* *Project 2* :slide:
  + Mobilify your shortener
  + Log data
  + Analyze it

* Mobile Layout :slide:
  + Header (eg. nav bar)
  + 3 columns (content of your choosing)
  + As screen width shrinks, changes to 2 columns, then 1 column
  + =ontouchstart= column background color must change

* Logging :slide:
  + Log access to the application in machine readable format
  + Datetime
  + Cookie ID
  + Action (page load, save URL, redirect)
    + Information about action
  + User Agent (Browser)
** Point :notes:
   + Purpose of logging is to be able to automatically parse it later
   + Problems with parsing: CSVs: Have a comma in value, similar to escaping
     problem

** JSON :slide:
   + One option: Use JSON
#+begin_src python
import json

logline = json.dumps({'datetime': ..., 'action': 'save',...})
# logline is now a string that can be printed
#+end_src

* Analysis :slide:
  + We'll cover analysis next lecture, deadline extended
  + What are the counts per action per Browser?
  + What are the most followed URLs?
** mrjob :notes:
   + We'll cover how to use a tool Yelp uses to data mine through its logs
   + Overkill for our logs, but got to understand concepts
   + In the meantime, just think what type of program you'd write if you were
     given the logs you're producing

* Extra Credit :slide:
  + Move columns
  + Log geolocation
  + Trending URLs
** Details :notes:
   + Use touch events to enable drag+drop of columns
   + Log geolocation data (eg. lat, long; city, state, country)
   + Define what a trend is (biggest increase in clicks from yesterday?) and
     find URL

* Submission :slide:
  + =git= 
  + Teams of up to 2
  + May use CSS frameworks, but must include HTML comments as to what mechanism
    is being used
  + December 6 
** Project 1 :notes:
   + If you'd like to reuse your Project 1 branch, stay after
   + Responsive frameworks use @media queries.  Use your comments to explain
     what specific selectors and properties are being changed when screen size
     varies

* =git= :slide:
#+begin_src bash
git checkout -b project2 project1
git merge master
# clean up conflicts, mostly around app.py def create(short)
git add # changed files
git commit # :wq
#do your project
git add # changed files
git format-patch --stdout origin/master  | sendmail jblomo vimalkini $USER
#+end_src

#+STYLE: <link rel="stylesheet" type="text/css" href="production/common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/color-blue.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/presenter.css" media="presenter" />
#+STYLE: <link href='http://fonts.googleapis.com/css?family=Lobster+Two:700|Yanone+Kaffeesatz:700|Open+Sans' rel='stylesheet' type='text/css'>

#+BEGIN_HTML
<script type="text/javascript" src="production/org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
# buffer-file-coding-system: utf-8-unix
# End:
