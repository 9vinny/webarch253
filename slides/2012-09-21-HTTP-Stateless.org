* HTTP, part duex :slide:

* Protocols and State :slide:
  + Stateful :: Commands depend on history of actions
  + Stateless :: Commands cannot access history
** State :notes:
   + Status of a resource
   + Bank account has state: how much money it has in it
   + Coin flips do not have state: doesn't matter what previous flips were

* SSH is Stateful :slide:
  + Relative directories depend on previous =cd= commands
  + Interactive sessions
  + Don't have to resend login information each command

* HTTP is Stateless :slide:
  + Must specify full context each request
    + Absolute path
    + Hostname
    + Cookies*
  + Current request doesn't depend on previous
  + Even on open connections, actual commands are stateless
** Notes :notes:
   + HTTP/1.1 keeps an open connection, but doesn't change the commands,
     headers, content required for the request
   + When making requests for images on a page, still must ask for absolute path
   + Resource have state: GET request for whattimeisit.com

* HTML over HTTP :slide:
#+begin_src html
<img src="img/raptor-genie.jpg">
#+end_src
  + Relative or absolute?
  + How does the browser request this image?
** Answers :notes:
   + =src= has a relative path
   + Browser appends relative path to current URL, then makes HTTP request
   + HTTP request is for the absolute path

* Paths in HTML & HTTP :slide:
  + HTTP :: Absolute paths
  + HTML :: Absolute or relative paths
** Translation :notes:
   + Browser translates relative paths in HTML to absolute paths in HTTP request

* Stateless Trade-offs :slide:
  + State requires space and coordination
  + State inherent in many applications
    + So it must be handled by client
    + Most common: authentication
** Managing State :notes:
  + Future lecture will focus on managing state in DBs
  + In general, you need multiple disks to dependably store state
  + Stateless means you don't have to coordinate
    + Easily scale without coordination
  + Authentication: must send credentials each time, but browser mostly handles
    it

* Fun with HTTP Status Codes :slide:animate:two_col:
  + =418= :: I'm a teapot (for HyperText Coffee Pot Control Protocol)
  + =420= :: Enhance Your Calm (Similar to =429 Too Many Requests=)

[[file:img/coffee-pot.jpg]] From [[http://en.wikipedia.org/wiki/List_of_HTTP_status_codes][List of HTTP status codes]]

* Server Generated Resources :slide:
** Questions :notes:
   + Webservers map between URIs and what?
   + What is the actual data send back for a resource called?
   + The apache webserver can serve files as resources: T/F?
   + Can forms be styled with css?
   + What are some input types?
   + Why is js useful with forms?
   + Can you rely on js to validate forms such that the server doesn't have to?
   + What is the DOM?
   + What's the tag that puts the ht in Html?
   + Is the font tag valid html5?

* Static vs. Dynamic Webpage :slide:
  + Static web pages are files that don't change
  + Dynamic web pages get generated by the server
  + Dynamic is an overloaded term
** Dynamic :notes:
   + Unfortunately, a few things can be dynamic
   + web pages (generated by server)
   + DHTML: basically javascript

* Trade-offs :slide:
  + Static pages can be read off disk quickly
  + Static pages can be served out of RAM even faster
  + Dynamic pages can change

* How fast? :slide:two_col:
[[file:img/test-nginx-1worker.png]]
[[file:img/dynamic-throughput.png]]
  + compare "Hello World"s both static & Dynamic

* Why should resources change? :slide:
  + Permissions
  + Your "own" profile page
  + Space / Time trade-off

* Craigslist :slide:
  + Every ad has a page
  + Users can create and remove ads
  + Ad pages have text, pictures, etc.

* Static Serving :slide:
  + Every ad uploaded generates an HTML file
  + When a user requests http://craigslist.org/ad-0001.html serve the file
  + CSS & Javascript also static files
** Trade-offs :notes:
   + Very fast serving
   + Simple to write, understand
   + No database dependencies
   + Easier to backup? Just copy files
   + Less flexible: How do you change the template?
   + Less normalized: how can you data-mine your ads?
   + More space: repeat the Head HTML over and over

* Dynamic Serving :slide:
  + Every ad uploaded kept in a database
  + When a user requests http://craigslist.org/ad-0001.html generate an HTML
    response
  + Response template is like madlibs: fill in the blanks
** Trade-offs :notes:
   + Slower to serve: have to calculate response
   + More complex to write: must interact with other libraries
   + Database dependency: DB must be up to serve traffic
   + Backup different systems: data, templates, code. How to backup DB?
   + More flexible: instantly change the template
   + Data separated from presentation: can mine, transform, annotate, modify
     data
   + Less space: Just the data and the template once

* Requirements :slide:
  + The data will be frequently modified by the user
  + Must serve pages as cheaply as possible
  + Must be able to send pages to another server
  + Designers must iterate on site design
  + Like Wikipedia, must create links to new pages in old
** Advantage :notes:
   + Dynamic
   + Static
   + Static
   + Dynamic
   + Dynamic

* What does Yelp do? :slide:animate:
  + Both!
  + Data stored in a database
  + When users request page, generate it
  + But also cache it!
  + So the next time, it can be served like a file*
** Caching :notes:
   + We'll discuss caching in another lecture
   + Caches are not exactly HTML files on disk
   + Usually stored in RAM

* CSS and Javascript? :slide:
  + Still static
  + Fairly rare that those assests are dynamically generated
  + Exception: some images

** HTML :slide:
[[file:img/most-interesting-html.jpg]]

** Systems :slide:
[[file:img/most-interesting-systems.jpg]]

** Philosoraptor :slide:
[[file:img/raptor-genie.jpg]]


#+STYLE: <link rel="stylesheet" type="text/css" href="production/bootstrap.min.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/color-blue.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/presenter.css" media="presenter" />
#+STYLE: <link href='http://fonts.googleapis.com/css?family=Lobster+Two:700|Yanone+Kaffeesatz:700|Open+Sans' rel='stylesheet' type='text/css'>

#+BEGIN_HTML
<script type="text/javascript" src="production/org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
# buffer-file-coding-system: utf-8-unix
# End:
