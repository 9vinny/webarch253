* *URIs* and *HTTP* :slide:

* URI :slide:
  + Uniform Resource Identifier
  + http://people.ischool.berkeley.edu/~ashams/i253/index.html

* URI URL URN :slide:
  + URI :: *Identifies* some resource (eg. person or file)
    + URL :: Specifies the *Location* of an identifier
    + URN :: Specifies the *Name* of an identifier
** Use in Industry :notes:
   + URL used day-to-day
   + URL technically a type of URI
   + URN almost never used
   + "Resource" something we'll cover more in depth, but for the common case it
     is a file

* Components :slide:
  + http://people.ischool.berkeley.edu/~ashams/i253/index.html

** Scheme :slide:
  + *http* ://people.ischool.berkeley.edu/~ashams/i253/index.html
  + Typically protocols
** What are examples of Protocols? :notes:
   + http
   + git
   + mailto

** Hierarchical :slide:
   + http: *//people.ischool.berkeley.edu/~ashams/i253/index.html*
   + "Directions" to the resource through hosts and folders

** Domain / Hostname :slide:
   + http:// *people.ischool.berkeley.edu* /~ashams/i253/index.html
   + "Site" or machine name
*** Preview :notes:
    + Later we'll talk about how the browser connection to the machine

** Path :slide:
   + http://people.ischool.berkeley.edu */~ashams/i253/index.html*
   + Similar to directories, but not necessarily linked!
   + Groups common resources together
*** Paths and Directories :notes:
    + On the command line we've used directories
    + For i-school HW, we've seen that paths reflect the underlying directories
    + But it doesn't have to be the case, as we'll see in the next lecture

** Query (Optional) :slide:
   + https://www.google.com/ *?q=ischool&ref=class*
   + Starts with =?=
   + key=value pairs, delimited by &

** Port :slide:
   + https://www.ischool.berkeley.edu *:443* /index.php
   + Specifies a port number to connect to
   + Ports are like doorways to a server
   + Common ports: 80 for HTTP, 443 for HTTPS
*** Ports covered later :notes:
    + We'll cover ports in more detail later in the class
    + Used to accept incoming connections
    + Different servers can run on different ports
    + Gave away Yelp interview question

** Fragment :slide:
   + http://en.wikipedia.org/wiki/URI_scheme *#Generic_syntax*
   + Specify a sub-resource, eg. a section on a page
   + Browser will jump to element =id=

** Whole Enchilada :slide:
#+begin_src text
  foo://username:password@example.com:8042/over/there/index.dtb?type=animal&name=narwhal#nose
  \_/   \_______________/ \_________/ \__/            \___/ \_/ \______________________/ \__/
   |           |               |       |                |    |            |                |
   |       userinfo         hostname  port              |    |          query          fragment
   |    \________________________________/\_____________|____|/ \__/        \__/
   |                    |                          |    |    |    |          |
scheme              authority                    path   |    |    interpretable as keys
 name   \_______________________________________________|____|/       \____/     \_____/
   |                         |                          |    |          |           |
   |                 hierarchical part                  |    |    interpretable as values
   |                                                    |    |
   |            path               interpretable as filename |
   |   ___________|____________                              |
  / \ /                        \                             |
  urn:example:animal:ferret:nose               interpretable as extension

 scheme
  name  userinfo  hostname       query
  _|__   ___|__   ____|____   _____|_____
 /    \ /      \ /         \ /           \
 mailto:username@example.com?subject=Topic
#+end_src

* Files :slide:
  + Chunks of data
  + Typically =filename.ext=, but not required
  + An extention only hints at file contents, but does not determine it
** TODO funny story :notes:

* Directories (Folders) :slide:
  + Group together files 

** Graphical View Directories :slide:
[[file:img/linux-root.png]]

** Command Line Interface Directories :slide:
[[file:img/dir-cli.png]]

** Delimiters :slide:
   + They are specified with a character
   + =/= on Unix & Apple, =\= on Windows
   + A starting =/= specifies an "absolute" path
** Path types :notes:
   + Absolute :: Specified from the "root" directory.  Doesn't matter which
     directory you're currently in.
   + Relative :: Directory name is contained in your current directory

* Don't do this at home :slide:
  + People on the Internet are mean
  + =rm -rf /=
  + Most computers have protections against this
** TODO mean internet :notes:
   + bash.org password quote

* Resource :slide:
  + Logical set of data
  + Typically files
  + Also generated pages, like a user profile

* Representations :slide:
  + Exact data that is transfered to client
  + Resources are abstract, Representations concrete
  + Example: User resource delivered as HTML or JSON
  + Example: Class emails delivered as HTML or Excel
** Requesting Representations :notes:
   + We'll go over how browsers can request the different representations

* One Resource per Logical Dataset :slide:
  + Example: Class emails delivered as HTML or Excel
  + Sometimes you'll see this as different URLs
  + Technically incorrect (like the =font= tag)

* Review :slide:
  + URIs identify a resource
  + Resources have a representation
  + Representations can be fetched with HTTP
** Let's review :notes:
   + going over some questions

* Review :slide:
  + Questions?
** No? :notes:
   + Great, I can start calling on people

** Review URI :slide:
   + What is a URL?
   + What is an example resource?
   + What is an example non-HTML representation?
   + =mailto:jblomo@ischool.berkeley.edu=
     What is the schema?
   + =file://WebArch-253/2012-09-14-HTTP.html#sec-4-9=
     What is the fragment?
*** Answers :notes:
   + Uniform Resource Locator
   + User profile picture
   + Image (jpeg, png)
   + mailto (email)
   + sec-4-9

** Review Paths :slide:
   + Relative or absolute?
     + /home/jblomo/public_html/i253/
     + public_html/i253/
     + Do these point to the same place?
   + What does the file =page.html= contain?
*** Answers :notes:
    + paths
      + absolute
      + relative
      + maybe, depends on your current directory
    + Data. We don't know more.

* HTTP :slide:
  + Built on a reliable network connection
  + Text based protocol
  + You can interact with a webserver by hand!
** Details :notes:
   + TCP is the network layer, which we'll study later
   + Basically guaruntees that the data we send will either get to the
     computer or we'll get an error
   + Text means you can write out the protocol with your keyboard

* Demo :slide:
  + TODO

* Request Methods :slide:
  + GET :: Retrieve representation without modifiying resource
  + POST :: Update the representation with new data
  + HEAD :: Retrieve the metadata without modifying resource
  + PUT :: Create a new resource
  + DELETE :: Remove a resource
** Use IRL :notes:
   + GET :: used almost everywhere
   + POST :: used anytime you want to send data
   + HEAD :: sometimes used for efficiency
   + PUT :: Rarely used for correctness (hipsters)
   + DELETE :: Rarely used for correctness (hipsters)

* Review :slide:
  + What did we use in the demo?
  + What should we use to create a new user?
  + What should we use to change a user's name?
  + What should we use to discover if a user is registered, but not fetch all
    their data?
** Answers :notes:
   + GET
   + PUT
   + POST
   + HEAD

* HTTP version :slide:
  + 1.1 used for interacting with customers
  + 1.0 used in datacenter for some achetectures
  + End users don't choose
** Flask :notes:
   + Flask will use 1.0: it will end the connection on each request

* Headers :slide:
  + Provide Metadata about the request
  + =Host= inform the server which service to request resource from
  + Multiple "hosts" can be served from one web server
** Example :notes:
   + =ischool.berkeley.edu= and =people.ischool.berkeley.edu= could be served
     off same physical server
   + =Host= header tells the server which we want

* To the Server! :slide:
  + We'll pick up on the server side to get more details

#+STYLE: <link rel="stylesheet" type="text/css" href="production/bootstrap.min.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/color-blue.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/presenter.css" media="presenter" />
#+STYLE: <link href='http://fonts.googleapis.com/css?family=Lobster+Two:700|Yanone+Kaffeesatz:700|Open+Sans' rel='stylesheet' type='text/css'>

#+BEGIN_HTML
<script type="text/javascript" src="production/org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
# buffer-file-coding-system: utf-8-unix
# End:
