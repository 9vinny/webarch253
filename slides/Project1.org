* Project: URL shortener :slide:
  + Demo: [[http://bitly.com][bitly]]
  + This project is simplier

** Project Details :slide:
   1. Update =templates/index.html= to create a form with 2 text fields: the short path, and the long url.
      1. Use the =label= tag to label the text fields.
      1. Improve the HTML with at least 2 non-form tag types.
      1. HTML must [[http://validator.w3.org/][validate]].
      1. Improve the CSS with at least 2 new selectors.
      1. Improve the CSS with at least 2 new properties.
      1. CSS must [[http://jigsaw.w3.org/css-validator/][validate]].
      1. Use Javascript to ensure the short path is only letters before the
         submit button can be clicked.
   1. The form must =POST= a request to =server/create= to create a new association between the short path and the long url.
   1. =server/create= must return HTML with information about the new association.
   1. Future attempts to =GET= =server/<short>= path must redirect to the long url.
   1. Attempts to =GET= =server/<short>= where <short> has no association must return =404 NOT FOUND=

** Due Date :slide:
   + Oct 18th, week after the midterm
   + Submit via =git=
#+begin_src bash
git add ... # all the files or directories you created or modified
git commit -m "Project 1: http://people... tested on Chrome... Firefox..."
git format-patch --stdout origin/master | sendmail $USER jblomo vimalkini
#+end_src

** Extra Credit: Adding bitly Features :slide:
   + Automatically choose short path
   + Use the same short path for existing URLs
   + Show number of clicks when shortening an existing URL

* =app.py= :slide:
  + Comments and docstrings
  + =@app.route= associates a path to a representation
  + =request.args.get= dictionary to access =GET= query arguments
  + =render_template= will render the file in =templates/=
  + =make_response= is generating an image
  + =/wiki= is a semi-working redirector to use in HW
  + =request.form.get= is a dictionary to access =POST= data
  + =db= is a dictionary that acts like a database
  + =app.logger.debug= will print out variables when requests are made
  + =flask.redirect= will send the correct headers and response code. Just give
    it a URL
  + compiling errors: restart =app.py=

#+STYLE: <link rel="stylesheet" type="text/css" href="production/common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/color-blue.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/presenter.css" media="presenter" />
#+STYLE: <link href='http://fonts.googleapis.com/css?family=Lobster+Two:700|Yanone+Kaffeesatz:700|Open+Sans' rel='stylesheet' type='text/css'>

#+BEGIN_HTML
<script type="text/javascript" src="production/org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
# buffer-file-coding-system: utf-8-unix
# End:
