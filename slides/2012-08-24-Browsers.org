* What is a *Web Browser?* :slide:
** Many things :notes:
   + "Thing I type Google into"
   + Loads data from the Internet
   + Displays it
   + Runs Javascript
   + has plugins

* What is the core?  :slide:
  [[file:img/www-gnu.png]]
  + [[http://en.wikipedia.org/wiki/WorldWideWeb][WorldWideWeb]] (confusingly named) the first browser
  + Tim Breners-Lee wrote it to share data with colleagues at CERN
  + Display HTML with Style Sheets from remote servers
  + Editing was built into the first version
  + Support different Protocols: FTP, HTTP, NNTP, local files
** Symmetric usage :notes:
   + Belief was that one would be creating as much as consuming information
   + Plus, can't build a browser if there's nothing to browse!
   + Already supported protocols for transferring files, reading newsgroups
   + Images originally displayed in a separate window.  Eventually inlined.

* Features :slide:
  + Network access
  + Interpreting the fetched data
    + Possibly fetching and interpreting dependencies like images
  + Rendering HTML with CSS rules
  + Running scripts in the context of the web page
  + Utility functions
** Examples :notes:
   + Network access :: HTTP
   + Fetched Data :: HTML, CSS
   + Rendering :: Displaying a table with row and column lines
   + Scripts :: Validating a password before submitting
   + Utility functions :: tabs, bookmarks, plugins

* Address Bar -> Web Page :slide:
  1. Analyze address bar to determine protocol and server
  1. Connect to server, download data and all dependencies
  1. Analyze HTML, generate a Document Object Model (DOM)
  1. Apply CSS to the DOM
  1. Display the DOM
  1. Start executing scripting code and re-render the DOM as required
  1. Continue executing and interpreting user actions
** Definitions :notes:
   + DOM :: A way of representing the HTML so that it can be analyzed and 
     modified
   + scripting :: programming language designed to work with web pages, eg. 
     Javascript
   + Recursive :: Each of these steps have at many steps underneath them

* What is a Browser?  :slide:center:
#+BEGIN_HTML
<iframe width="560" height="315" src="http://www.youtube.com/embed/o4MwTvtyrUQ" frameborder="0" allowfullscreen></iframe>
#+END_HTML

* Why Separate the Browser from Websites?  :slide:
  + Composability!
  + Improve the features around the website without upgrading the website
    + Original browser did not have Forward Back buttons
  + Accessibility
   + Tradeoff is the layouts need to follow rules, designers must design with 
     multiple audiences in mind
** Flexibility :notes:
   + Separating the content from the presentation allows you more flexibility with how you want to use it
   + What if you could only view websites like a TV image. No cut+paste, viewing on mobile vs. desktop

* Browser or Web Page?  :slide:
  + [[file:img/ie8-logo.png]] Internet Explorer
  + [[file:img/Google_logo.png]]
  + [[file:img/nyt-logo.png]]
  + Firefox [[file:img/firefox-logo.png]]
  + Others?

* Browsers, Apps, Operating Systems :slide:
  + Traditionally, browsers were applications running in an OS like Windows
  + Scripting enables browsers to run their own code
  + Complex web pages (eg. Gmail) behave almost like an application
  + Browsers could become an OS themselves, ala ChromeOS
  + Some Apps now written entirely in Javascript

* Market Share :slide:
  [[file:img/browser-share.png]]

* Utilities :slide:
  + /Firefly/ for Firefox, /Developer Tools/ for Chrome
  + Enable you to modify the page as you're viewing it
  + Valuable for understanding how HTML and CSS are rendered

* Questions :slide:
   + What is CSS used for?
   + What are some of the utilities you use in your browser?

* Browsing Information Not a New Idea :slide:center:
#+BEGIN_HTML
<iframe width="420" height="315" src="http://www.youtube.com/embed/hSyfZkVgasI" frameborder="0" allowfullscreen></iframe>
#+END_HTML
  Paul Otlet

* World Brain :slide:
  + Proposals for Encyclopaedia from H.G. Wells 1937
  + Engelbart developed oN-Line System (NLS) that used HyperText 1960s
  + "Notecards" at Xerox PARC 1984

* *Homework* :slide:
  + Learn *git* for future homework submissions
  + practice sending a homework
  + reading

* What is *git?* :slide:
  + Version Control System
    + Keep track of different versions of code
    + Don't accidentally delete stuff
    + Go back to working versions
  + That is easy to share
    + Can send an email with all the code or questions

* *Demo* :slide:
** Commands :notes:
   + Learn as much as you like at [[http://learn.github.com/p/intro.html][learn.github]]
   + [[https://www.ischool.berkeley.edu/intranet/computing/connecting/files][ssh ischool]]
#+begin_src bash
   git config --global user.name Jim Blomo
   git config --global user.email jblomo@ischool.berkeley.edu
   git clone git://github.com/jblomo/webarch253.git
   cd webarch253
#+end_src
*** For every new homework:
#+begin_src bash
   git checkout -b hw1 master
   echo Jim Blomo > $USER.txt
   git add $USER.txt
   git commit -m "my first homework"
   git format-patch --stdout master | sendmail jblomo@ischool.berkeley.edu
#+end_src

* Homework 1 :slide:
   + `pico $USER.txt`
   + Write two paragraphs:
     1. Your experience with web archtecture. Have you written HTML before? 
        Written Javascript? etc.
     2. What are your favorite features from at least 2 browsers?
   + Reading:
     + [[http://www.w3.org/DesignIssues/TimBook-old/History.html][A Brief History of the Web]]
     + [[http://www.scientificamerican.com/article.cfm?id=long-live-the-web&print=true][Long Live the Web]]
*** Optional :notes:
   + If you would like to use GitHub's advanced featues
   + Signup for an account at [[https://github.com][GitHub]]
   + "Fork" https://github.com/jblomo/webarch253
   + *Do not* share code or look for other's code
   + All HW and Projects are submitted by email, not Pull Requests



#+STYLE: <link rel="stylesheet" type="text/css" href="production/common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/color-blue.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="production/presenter.css" media="presenter" />
#+STYLE: <link href='http://fonts.googleapis.com/css?family=Lobster+Two:700|Yanone+Kaffeesatz:700|Open+Sans' rel='stylesheet' type='text/css'>

#+BEGIN_HTML
<script type="text/javascript" src="production/org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
# buffer-file-coding-system: utf-8-unix
# End:
