* Storage Systems :slide:

* Why data storage :slide:
  + Where is data stored?
  + Where does application state live?
  + How to save resource information?
** Talked :notes:
   + We've talked about some of these ideas in abstract, but in this course
     we'll cover some of the options
   + Modern web systems are almost all connected to a data layer, mostly a
     traditional database
   + So when developing web applications, important to know the basics of this
     layer

* Project bit.ly :slide:
  + Lots of data to store:
  + short name to long URL
  + statistics about link
  + information about users
** Project :notes:
   + Hopefully everyone turned it in?
   + Long term, we'd like to store a fair amount of data
   + Not just the mapping in the project, but potentially lots of other
     information, too

* Conceptually :slide:
  | long url | http://news.google.com |
  | short name | http://bit.ly/awekl |
  | hit count | 482240 |

  | long url | http://facebook.com/user/profile/ |
  | short url | http://bit.ly/czaws |
  | hit count | 11023 |
** In theory :notes:
   + We generally know we want to store these different kinds of data
   + Naturally grouped into information pertaining to a long url
   + Named quantaties. We'd rather not say "4th thing in the list"

* Data Sotrage Design :slide:
  + What is the storage format?
  + How do we lay out the data?
  + How do we access the data?
** Design :notes:
   + We have many trade-offs when considering where and how to store data
   + These are the top priorities we'll cover, but as with everything else, many
     subtleties

* Simple :slide:animate:
  + What is the simpliest way we can store data?
  + File!
  + CSV, Shelve, JSON 
** Guess :notes:
  + What is the simpliest way we can store data?

* File Example :slide:
  + Append to =urls.csv=:
#+begin_src csv
http://news.google.com, http://bit.ly/awekl, 482240
http://facebook.com/user/profile/, http://bit.ly/czaws, 11023
#+end_src
** Simple :notes:
   + Each time a user makes a new short URL, we append to the list
   + Given a short, how would we know where to redirect?

* Advantages? :slide:animate:
  + Simple: no server to run
  + Easy to debug: open in editor
  + Easy* to manually change
  + Backups: copy file
  + Writes optimized by the OS
  + Reads optimized* by the OS
** Guess :notes:
   + What are some advantages and why?

* Disadvantages? :slide:animate:
  + How to add a new field?
  + Advanced queries?
  + Lookup effeciency?
  + Multiple processes, or servers accessing data?
  + Additional programming to access fields?

* Data Independence :slide:
  + Databases: apps should have to worry about these problems!
  + Underlying storage format independent of application-level logic
** 1960-1970 :notes:
   + In the 1960's and 70's, CS made an arguement that we shoudl separate
     storage logic from application logic
   + Let a "database" deal with how to add new fields, do advanced queries, etc.
   + Use a unified language to access data
